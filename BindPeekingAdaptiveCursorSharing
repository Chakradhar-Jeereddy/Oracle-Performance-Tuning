Query to check adaptive cursor sharing flags -
--SELECT CHILD_NUMBER AS CHILD#,
  EXECUTIONS AS EXEC, BUFFER_GETS AS BUFF_GETS,
  IS_BIND_SENSITIVE AS BIND_SENS,
  IS_BIND_AWARE AS BIND_AWARE,
  IS_SHAREABLE AS SHARABLE
  FROM V$SQL
  WHERE SQL_ID='&SQL_ID'
  ORDER BY CHILD_NUMBER;

Bind peeking - This can happend when data in a predicate column is not evenly distributed.

EMP
Prct  LANG Value
75%     ENG
2%      FRN
4%      ARB
1%      SPN

SELECT * FROM EMP WHEHR LANG = :V_LANG;

--In the above statement, if ENG is used, the optimizer uses full scan as cardinality is high.
  when FRN is passed in next execution, the full scan is a suboptimal plan because cardinality is low.
 
 To solve this problem oracle devloped a techinque called Adatptive cursor sharing.
--- It aims at solving bind peeking issue
--- Monitors statements that use bind variables to determine whether a new plan is more efficient
    It stored the values of bind variables and does a soft parse to find if an efficent plan can be obtained.
--- Cursors are flagged:
--- Bind-sensitive cursor: a cursor whose optimal plan may depend on the value of a bind variable
--- Bind-aware cursor: a bind-sensitive cursor that is eligible to use different plans for different bind values (Extended Cursor Sharing)
--- If two different bind variable values produce the same plans, they are merged.

With the new tichnique, oracle monitors values passed to the database and stores them in the cursor cache 
together with their execution statisics.
It generates different plans depending on values passed to the bind values.

---First time the statement is executed, it flags the plan as bind-sensitive cursor.
---Second time the statement uses the initial plan and after execution it compares the actual cardinality retrieved by initial plan.
If there is significant difference it marks the initial plan as bind-aware cursor. (called extended cursor sharing).
When this flag is set, optimizer understands that plan could be suboptimal with some bind variable values and 
it may need to produce different plan.
Note - bind-aware flag can't be set unless bind-sensitive flag is already set.
---Third time the statement is executed, the optimizer notices that bind aware flag is set and it performs soft parse on the 
statement and determine the cardinality of new values falls within the range of cardinality of stored values. 
If yes, it resuses the execution plan in the existing child cursor.
---If the cardinality is vastly different, the optimizer creates a new child cursor with a different execution plan and this hard parse and uses 
this plan one time.
---Fourth time if values passes to the bind matches with initial plan, it creates a new child cursor plan, merges with intial plan and removes one of  
them.
---After running the statement for many times, with most used bind variables, the hard and soft parses go down and statment reaches to stable 
performance level. 

   
   







