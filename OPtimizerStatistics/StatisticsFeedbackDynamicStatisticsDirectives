Tips 
-- show parameter OPTIMIZER_DYNAMIC_SAMPLING
--Note
     - statistics feedback used for this statement.
--Note 
     - dynamic statistics used: dynamic sampling(level=2) : level 2 (at least one table has no statistics)

1 Examining how statistics feedback work
If object statitics do not reflect the actual cardinality.
During execution of query, the optimizer processes existing stats and generates a plan.
The statistics collector compares the execution plan with actual cordinality, if there is mismatch, it still use the plan and marks it as
is_reoptimizable=y. So next time it collects statistics on the fly, doesn't rely on object statistics and creates new plan 
in new cursor and marks it as is_reoptimizable=n, in theory the new plan should perform better.

You can know statistics feedback has been used in an execution plan when you see the following note:
- statistics feedback used for this statement.

--how to display cardinality estimate and actual cardinality in the plan.
--Use the gather_plan_statistics hint in the query:
select /*+ gather_plan_statistics */...from ...
Or set the statistics_level to ALL at session level
alter session set statistics_level='ALL';

when displaying the execution plan using display_cursor, use the 'ALLSTATS LAST' option in the format parameter

---SELECT * FROM table (DBMS_XPLAN.DISPLAY_CURSOR(NULL, NULL, 'ALLSTATS LAST'));
------------------------------------------------------------------
| Id | Operation        | Name      | Starts | E-Rows | A-Rows
------------------------------------------------------------------
| 0 | SELECT STATEMENT  |           | 1      |        | 3256
|* 1 | TABLE ACCESS FULL| CUSTOMERS | 1      | 1      | 3256
------------------------------------------------------------------
--The estimated rows/cardinality is far from actual rows/cardinality, due to this mismatch a new plan gets generated during next execution of 
query.
Note - Differnce between dynamic statistics and statistics feedback-

---Advantage - 
   Automatically improves plans for repeated queries that have cardinality misestimates
--- Its mechanism:
      In the first execution of a SQL statement, the optimizer produces an
      execution plan based on the object statistics.
      At the end of the first execution, the optimizer compares between its
      cardinality estimates with the actual cardinality of each plan operation
      If the cardinality discrepancy is significant, then the optimizer stores its
      collected cardinality statistics for subsequent use and sets the
      IS_REOPTIMIZABLE to ‘Y’
      In the next statement execution, a new plan is produced using the collected cardinality

######################################################################################################
2) Examine how Dynamic statistics work - When stats are missing or insufficent statistics. The optimizer detects this at compilation time, where has statistics feedback
is during execution time. 

When statistics are missing the optimizer runs recursive query to get sample data and performs stats on it and creates an execution plan based on those
statistics. When we display the plan it will show in note.
Note- dynamic statistics used: dynamic sampling(level=2)

It will be showed in statement level too:
select /*+ DYNAMIC_sampling(s, 4) */...* from customer

About OPTIMIZER_DYNAMIC_SAMPLING
Level     Description Sample                                                                                          Size
0         Disable dynamic statistics
1         Table has not statistics                                                                                    32 blocks
2 (*)     At least one table in the query has no statistics                                                           64 blocks
3         Level 2 criteria + one or more expressions in the WHERE clause                                              64 blocks
4         Level 2 criteria + predicate use AND/OR operators                                                           64 blocks
5-9       Level 4 criteria                                                                                            128 to 4,086 blocks
10        Sample all the blocks                                                                                       ALL
11        (**) The optimizer automatically decides if dynamic statistics is needed (even if table statistics exist)   automatic

(*) Default value
(**) Introduced in Oracle 12c

################################################################################################################
3) Directives -
When a directive is used by the optimizer:
Note
-----
   - 1 Sql Plan Directive used for this statement
   
By default, directives are not used. To enable them:
   - ALTER SESSION SET OPTIMIZER_ADAPTIVE_STATISTICS=TRUE;
Note - It controls the usage of directives, but creation of directives takes place even when it is set to false.
Observation: the database tend to create directives when
   - OPTIMIZER_DYNAMIC_SAMPLING is set to 11

Display directives 
  - SELECT  FROM DBA_SQL_PLAN_DIRECTIVES d, DBA_SQL_PLAN_DIR_OBJECTS o WHERE d.DIRECTIVE_ID=o.DIRECTIVE_ID ORDER BY d.DIRECTIVE_ID,d.TYPE;

Directive ID: 8866193703852068664
Type: DYNAMIC_SAMPLING  (created by dynamic sampling)
State: USABLE           ( will remind optimizer)
Object Name: CUSTOMERS
Object Type: COLUMN
Column: CUST_LANGUAGE
Reason: SINGLE TABLE CARDINALITY MISESTIMATE
Last Used: Num Rows:
Notes:
<spd_note><internal_state>NEW</internal_state><redundant>NO</redundant>
<spd_text>{EC(SOE.CUSTOMERS2)[CUST_LANGUAGE,
NLS_TERRITORY]}</spd_text></spd_note>

Display directives of a table

---SELECT 'DIR_ID: ' || TO_CHAR(d.DIRECTIVE_ID) ||chr(10) ||
   'Type: ' || d.TYPE||chr(10) ||
   'State: ' || d.STATE || chr(10) ||
   'Object Name: '|| o.OBJECT_NAME ||chr(10) ||
   'Object Type: ' || o.OBJECT_TYPE||chr(10) ||
   'Column: ' || o.SUBOBJECT_NAME ||chr(10) ||
   'Reason: ' || d.REASON ||chr(10) ||
   'Last Used: ' || d.LAST_USED ||chr(10) ||
   'Num Rows: ' || o.NUM_ROWS ||chr(10) ||
   'Notes: ' || d.Notes ||chr(10) DIRECTIVE
    FROM DBA_SQL_PLAN_DIRECTIVES d, DBA_SQL_PLAN_DIR_OBJECTS o
    WHERE d.DIRECTIVE_ID=o.DIRECTIVE_ID
   AND o.OWNER ='SOE' and o.OBJECT_NAME = 'CUSTOMERS2'
   ORDER BY d.DIRECTIVE_ID,d.TYPE;

This is memory area(data disctionary) to store the dynamic samples and plan, so next time when optimizer runs the query,
it tells optimizer to use the plan from directive and doesn't need to resample to data to estimate cardinality. This minimizes the processing overhead.
Not just that, it tells dbms_stats to collect the reqired statistics while gathering stats and resolves the problem with insufficient stats.
After problem is resoloved, the directives are marked as superceeded and dropped.

Note - After directives are created, it can't be used by the query being executed, it has to be reparsed.

About SQL Plan Directives
--- A SQL plan directive is reminder to the optimizer itself to perform data sampling when column group statistics are missing
--- Use: dynamic statistics and column group statistics
--- They are tied to objects (not statements)
--- When it is first created, its STATE is USABLE
--- When it is superseded by a better directive, existing histograms, or extension statistics, its state becomes SUPERSEDED
--- Information about them can be obtained from the DBA_SQL_PLAN_DIRECTIVES and DBA_SQL_PLAN_DIR_OBJECTS




