Join Order hints - We tell optimizer which table to use as driving table or probing table

a) ORDERED - This hint selects the driving table in the order they appear in from clause, first table will be the driving/outer table. 
             second table will be inner table. If we don't use this hint, optimizer choose the one as driving table with smafewest number of rows in table set.
			       This is based on statistics of the objects.
			       When conditions are so complex, optimizer may fail to choose the table which best fits as driving table.
             Syntax /*+ordered*/ 
			 

select emp_no,ename,salary,dname from emp e, dept d where (salary between 100000 and 200000) and (d.dept_no=e.dept_no);
Execution Plan
----------------------------------------------------------
Plan hash value: 2125045483

----------------------------------------------------------------------------------------
| Id  | Operation                    | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |         |   507 | 20280 |     8  (13)| 00:00:01 |
|   1 |  MERGE JOIN                  |         |   507 | 20280 |     8  (13)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT    |     7 |    91 |     2   (0)| 00:00:01 |
|   3 |    INDEX FULL SCAN           | DEPT_PK |     7 |       |     1   (0)| 00:00:01 |
|*  4 |   SORT JOIN                  |         |   507 | 13689 |     6  (17)| 00:00:01 |
|*  5 |    TABLE ACCESS FULL         | EMP     |   507 | 13689 |     5   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("D"."DEPT_NO"="E"."DEPT_NO")
       filter("D"."DEPT_NO"="E"."DEPT_NO")
   5 - filter("SALARY">=100000 AND "SALARY"<=200000)
   
Note - In the above table DEPT used as driving table as it right below the merge join.
       
select /*+ordered*/ emp_no,ename,salary,dname from emp e, dept d where (salary between 100000 and 200000) and (d.dept_no=e.dept_no);
Execution Plan
----------------------------------------------------------
Plan hash value: 1123238657

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |   507 | 20280 |    40   (0)| 00:00:01 |
|*  1 |  HASH JOIN         |      |   507 | 20280 |    40   (0)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| EMP  |   507 | 13689 |     5   (0)| 00:00:01 |
|   3 |   TABLE ACCESS FULL| DEPT |     7 |    91 |    35   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - access("D"."DEPT_NO"="E"."DEPT_NO")
   2 - filter("SALARY">=100000 AND "SALARY"<=200000)

Note
-----
   - this is an adaptive plan

Note: After using the ordered hint optimizer choosed emp as driving table as it is first table as appears in from clause and also the table after the join in
      execution plan.

b) LEADING - Influences optimizer to use the provided list of tables as driving tables
             in the sequence as provided(regardless of their sequence after the from clause)
             syntax - /*+leading (table_list)*/
             If one table is provided the table becomes the first driving table.
             If we specify ordered hint, it overrides the leading hints.

select /*+leading(d)*/ emp_no,ename,salary,dname from emp e, dept d where (salary between 100000 and 200000) and (d.dept_no=e.dept_no);
Execution Plan
----------------------------------------------------------
Plan hash value: 2125045483

----------------------------------------------------------------------------------------
| Id  | Operation                    | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |         |   507 | 20280 |     8  (13)| 00:00:01 |
|   1 |  MERGE JOIN                  |         |   507 | 20280 |     8  (13)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT    |     7 |    91 |     2   (0)| 00:00:01 |
|   3 |    INDEX FULL SCAN           | DEPT_PK |     7 |       |     1   (0)| 00:00:01 |
|*  4 |   SORT JOIN                  |         |   507 | 13689 |     6  (17)| 00:00:01 |
|*  5 |    TABLE ACCESS FULL         | EMP     |   507 | 13689 |     5   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("D"."DEPT_NO"="E"."DEPT_NO")
       filter("D"."DEPT_NO"="E"."DEPT_NO")
   5 - filter("SALARY">=100000 AND "SALARY"<=200000)

Note - For above query optimizer had selected provided dept table as driving table regardless of table sequence in from clause.


