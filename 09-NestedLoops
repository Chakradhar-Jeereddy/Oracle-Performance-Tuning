Nested loops

-- How nested loops work and when it should be used and why?
-- Why - If a query references two or more tables, join method must be used to merge the row sources of the table.

-- The functionality of any join method is same, joining the input row sources into one output data set.
-- The input from row source can be from a table or from an out put of an execution operation.
-- The optimizer reads one table and use that data to lookup into other table.

Example - Select ename,dname from EMP E, DEPT D where e.dept_no=d.dept_no;

Driving/outer table - The table that oprtimizer reads first. It is always left side table
Driven end/inner table - Right side table.

Output of a join can be input to another join or it is gievn to the requestor.

When it comes to joining the row sources, optimizer has to decide three things about joins and use one which is least cost- 
1) Join method 
    Nested loops
	Hash Joins
	Sort merge joins
	Cartesian joins

2) Join order: Defines which table should be accessed first (outer table or driving table), the other table is inner or driven end table.

3) Join type: The condition that defines the relationship between input row sources.
    Inner joins 
	Outer joins
	Semijoins
	Antijoins
	
Example - 

Select ename,dname from emp e, dept d where e.dept_no=d.deptno;

Note - In nested loop, optimizer always uses smaller row source as outer table/driving table.
       Processing steps - Reads the first record of driving table using full or index scan which ever optimizer thinks is the best.
	                      Using the record as input, the inner table is accessed to find matching record using FTS/index scan.
						  The matching record along with input record is stored in result set. And is ready for client before retrieving the rest of
						  the result set. This is the major advantage of this join type. High response time for retrieving first rows of the result set.
						  If the smaller table is used as driving table more rows can be retrived in a single fetch.
						  
						  
						  
When optimizer considers nested loop joins?
  - Small subset of data are to be joined.
  - The optimizer mode is set to first_N_rows
  - If it is efficient method of accessing the inner table. Like of columns involved in join condition are indexed which avoids full scan.
  
Example - 

SELECT EMP_NO,ENAME,DNAME FROM EMP, DEPT WHERE DEPT.DEPT_NO = EMP.DEPT_NO AND EMP_NO=630;

---------------------------------------------------------
| Id | Operation                     | Name    | Rows  |
---------------------------------------------------------
| 0  | SELECT STATEMENT              |         |  1    |
| 1  |  NESTED LOOPS                 |         |  1    |
| 2  |   TABLE ACCESS BY INDEX ROWID | EMP     |  1    |
| 3  |    INDEX UNIQUE SCAN          | EMP_PK  |  1    |
| 4  |   TABLE ACCESS BY INDEX ROWID | DEPT    |  1    |
| 5  |    INDEX UNIQUE SCAN          | DEPT_PK |  1    |
---------------------------------------------------------
Here the ID with bigger number and inner most one is executed first.
The first table accessed it dept which is outer table.

