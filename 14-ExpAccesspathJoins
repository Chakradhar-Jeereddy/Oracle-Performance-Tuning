--Run the following query and observe the access path used in the execution plan.
--The optimizer uses a full table scan (FTS) to retrieve the required data.

SET LINESIZE 180
SET AUTOT TRACE EXP
SELECT * FROM WAREHOUSES;
Execution Plan
----------------------------------------------------------
Plan hash value: 3585052864
--------------------------------------------------------------------------------
| Id  | Operation         | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |            |  1000 | 27000 |     4   (0)| 00:00:01 |
|   1 |  TABLE ACCESS FULL| WAREHOUSES |  1000 | 27000 |     4   (0)| 00:00:01 |


--Run the following query and observe the access path used in the execution plan.
--The optimizer uses "Index unique scan" because only one row will be returned from the scan of
--a unique index.
--This access path is followed by "TABLE ACCESS BY INDEX ROWID" to retrieve the required row
--from the table based on the ROWID retrieved form the index.

SELECT * FROM WAREHOUSES WHERE WAREHOUSE_ID=10;
Execution Plan
----------------------------------------------------------
Plan hash value: 2784191864
---------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |               |     1 |    27 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| WAREHOUSES    |     1 |    27 |     2   (0)| 00:00:01 |
|*  2 |   INDEX UNIQUE SCAN         | WAREHOUSES_PK |     1 |       |     1   (0)| 00:00:01 |
---------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("WAREHOUSE_ID"=10)


--Run the following queries and observe the access paths used in the execution plan.
--The optimizer uses "INDEX RANGE SCAN" when multiple values are possible for the index key. It is
--used with the equality operator below because the index that has been used is non-unique.
--Therefore, the optimizer is not sure how many rows will be retrieved.

SQL> SELECT * FROM WAREHOUSES WHERE WAREHOUSE_ID>180;
Execution Plan
----------------------------------------------------------
Plan hash value: 3585052864
--------------------------------------------------------------------------------
| Id  | Operation         | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |            |   821 | 22167 |     4   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| WAREHOUSES |   821 | 22167 |     4   (0)| 00:00:01 |
--------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("WAREHOUSE_ID">180)

select /*+index(WAREHOUSES,WAREHOUSES_PK)*/ * FROM WAREHOUSES WHERE WAREHOUSE_ID>180
Execution Plan
----------------------------------------------------------
Plan hash value: 1701859959
-----------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |               |   821 | 22167 |     8   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| WAREHOUSES    |   821 | 22167 |     8   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN                  | WAREHOUSES_PK |   821 |       |     3   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("WAREHOUSE_ID">180)


SELECT * FROM WAREHOUSES WHERE LOCATION_ID=7244;
Execution Plan
----------------------------------------------------------
Plan hash value: 3486536519
-------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name            | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                 |     1 |    27 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| WAREHOUSES      |     1 |    27 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN                  | WHS_LOCATION_IX |     1 |       |     1   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("LOCATION_ID"=7244)


--Run the following query and observe the access path used in the execution plan.
--The optimizer uses "INDEX RANGE SCAN DESCENDING" because index key column is used in the
--ORDER BY clause with DESC option.

SELECT * FROM WAREHOUSES WHERE WAREHOUSE_ID>180
ORDER BY WAREHOUSE_ID DESC;
Execution Plan
----------------------------------------------------------
Plan hash value: 2083944140
---------------------------------------------------------------------------------
| Id  | Operation          | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |            |   821 | 22167 |     5  (20)| 00:00:01 |
|   1 |  SORT ORDER BY     |            |   821 | 22167 |     5  (20)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| WAREHOUSES |   821 | 22167 |     4   (0)| 00:00:01 |
---------------------------------------------------------------------------------

select /*+index(WAREHOUSES,WAREHOUSES_PK)*/ * FROM WAREHOUSES WHERE WAREHOUSE_ID>180 ORDER BY WAREHOUSE_ID DESC;  2

Execution Plan
----------------------------------------------------------
Plan hash value: 1124298163
------------------------------------------------------------------------------------------------------
| Id  | Operation                            | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                     |               |   821 | 22167 |     9  (12)| 00:00:01 |
|   1 |  SORT ORDER BY                       |               |   821 | 22167 |     9  (12)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID BATCHED| WAREHOUSES    |   821 | 22167 |     8   (0)| 00:00:01 |
|*  3 |    INDEX RANGE SCAN                  | WAREHOUSES_PK |   821 |       |     3   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("WAREHOUSE_ID">180)


--Run the following query and observe the access path used in the execution plan.
--"INDEX FULL SCAN" is used because the query references the non-nullable column DEPT_NO in the
--ORDER BY clause. This access path eliminates the sort operation.

SELECT DEPT_NO, DNAME FROM DEPT ORDER BY DEPT_NO;
Execution Plan
----------------------------------------------------------
Plan hash value: 1726130703
---------------------------------------------------------------------------------------
| Id  | Operation                   | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |         |     7 |    91 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| DEPT    |     7 |    91 |     2   (0)| 00:00:01 |
|   2 |   INDEX FULL SCAN           | DEPT_PK |     7 |       |     1   (0)| 00:00:01 |
---------------------------------------------------------------------------------------


--Run the following query and observe the access path used in the execution plan.
--The optimizer uses "INDEX FAST FULL SCAN" because the index has the required column and the
--order of the retrieved rows does not matter.
--If you see the operation PX COORDINATOR, this means the query runs in parallel. To disable
--parallel execution, use the NO_PARALLEL hint.

SELECT WAREHOUSE_ID FROM WAREHOUSES WHERE WAREHOUSE_ID>180;
Execution Plan
----------------------------------------------------------
Plan hash value: 2133609682
----------------------------------------------------------------------------------------------------------------------
| Id  | Operation               | Name          | Rows  | Bytes | Cost (%CPU)| Time     |    TQ  |IN-OUT| PQ Distrib |
----------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT        |               |   821 |  3284 |     2   (0)| 00:00:01 |        |      |           |
|   1 |  PX COORDINATOR         |               |       |       |            |          |        |      |           |
|   2 |   PX SEND QC (RANDOM)   | :TQ10000      |   821 |  3284 |     2   (0)| 00:00:01 |  Q1,00 | P->S | QC (RAND)  |
|   3 |    PX BLOCK ITERATOR    |               |   821 |  3284 |     2   (0)| 00:00:01 |  Q1,00 | PCWC |           |
|*  4 |     INDEX FAST FULL SCAN| WAREHOUSES_PK |   821 |  3284 |     2   (0)| 00:00:01 |  Q1,00 | PCWP |           |
----------------------------------------------------------------------------------------------------------------------

SQL>  SELECT /*+no_parallel*/ WAREHOUSE_ID FROM WAREHOUSES WHERE WAREHOUSE_ID>180;

Execution Plan
----------------------------------------------------------
Plan hash value: 3095725505
--------------------------------------------------------------------------------------
| Id  | Operation            | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT     |               |   821 |  3284 |     2   (0)| 00:00:01 |
|*  1 |  INDEX FAST FULL SCAN| WAREHOUSES_PK |   821 |  3284 |     2   (0)| 00:00:01 |
--------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("WAREHOUSE_ID">180)

Hint Report (identified by operation id / Query Block Name / Object Alias):
Total hints for statement: 1 (U - Unused (1))
---------------------------------------------------------------------------

   0 -  STATEMENT
         U -  no_parallel

Note
-----
   - Degree of Parallelism is 1 because of hint


--Run the following query and observe the join used in the execution plan.
--Nested loop has been used because a few rows (only one in this case) will be processed.
--Note: If the Nested Loop is not used by the Optimizer with this step code, try using the hint /*+
--Can you know which table is the driving table? and Why?

SELECT ENAME, DNAME FROM DEPT, EMP WHERE DEPT.DEPT_NO = EMP.DEPT_NO AND DEPT.DEPT_NO=10;
Execution Plan
----------------------------------------------------------
Plan hash value: 1706465873
------------------------------------------------------------------------------------------------
| Id  | Operation                            | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                     |         |   113 |  3616 |     4   (0)| 00:00:01 |
|   1 |  NESTED LOOPS                        |         |   113 |  3616 |     4   (0)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID        | DEPT    |     1 |    13 |     1   (0)| 00:00:01 |
|*  3 |    INDEX UNIQUE SCAN                 | DEPT_PK |     1 |       |     0   (0)| 00:00:01 |
|   4 |   TABLE ACCESS BY INDEX ROWID BATCHED| EMP     |   113 |  2147 |     3   (0)| 00:00:01 |
|*  5 |    INDEX RANGE SCAN                  | DEPT_IX |   113 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("DEPT"."DEPT_NO"=10)
   5 - access("EMP"."DEPT_NO"=10)

Note - Driver table is EMP and driven end table is DEPT.
       But it will be more efficeint if we use dept as driver table becuase
	   It has less rows to scan.
	   
--Following hint uses dept as driving table
select /*+ ordered */ ENAME, DNAME FROM EMP,DEPT  WHERE DEPT.DEPT_NO = EMP.DEPT_NO AND DEPT.DEPT_NO=10;

Execution Plan
----------------------------------------------------------
Plan hash value: 2375772551
------------------------------------------------------------------------------------------------
| Id  | Operation                            | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                     |         |   113 |  3616 |     4   (0)| 00:00:01 |
|*  1 |  HASH JOIN                           |         |   113 |  3616 |     4   (0)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID BATCHED| EMP     |   113 |  2147 |     3   (0)| 00:00:01 |
|*  3 |    INDEX RANGE SCAN                  | DEPT_IX |   113 |       |     1   (0)| 00:00:01 |
|   4 |   TABLE ACCESS BY INDEX ROWID        | DEPT    |     1 |    13 |     1   (0)| 00:00:01 |
|*  5 |    INDEX UNIQUE SCAN                 | DEPT_PK |     1 |       |     0   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - access("DEPT"."DEPT_NO"="EMP"."DEPT_NO")
   3 - access("EMP"."DEPT_NO"=10)
   5 - access("DEPT"."DEPT_NO"=10)

select /*+ leading(DEPT,EMP)  */ ENAME, DNAME FROM EMP,DEPT  WHERE DEPT.DEPT_NO = EMP.DEPT_NO AND DEPT.DEPT_NO=10;
Execution Plan
----------------------------------------------------------
Plan hash value: 1706465873
------------------------------------------------------------------------------------------------
| Id  | Operation                            | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                     |         |   113 |  3616 |     4   (0)| 00:00:01 |
|   1 |  NESTED LOOPS                        |         |   113 |  3616 |     4   (0)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID        | DEPT    |     1 |    13 |     1   (0)| 00:00:01 |
|*  3 |    INDEX UNIQUE SCAN                 | DEPT_PK |     1 |       |     0   (0)| 00:00:01 |
|   4 |   TABLE ACCESS BY INDEX ROWID BATCHED| EMP     |   113 |  2147 |     3   (0)| 00:00:01 |
|*  5 |    INDEX RANGE SCAN                  | DEPT_IX |   113 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("DEPT"."DEPT_NO"=10)
   5 - access("EMP"."DEPT_NO"=10)


--Run the following query and observe the join used in the execution plan.
--Why do you think the hash join is used?
--Can you know which table is used as a hash table? and Why?
--Note: the execution plan may display value for the "TempSpc". This indicates that the memory does not fit for the hash table and temporary space had to be used.

SELECT O.ORDER_ID, O.ORDER_DATE, C.CUST_LAST_NAME FROM ORDERS O, CUSTOMERS C WHERE O.CUSTOMER_ID = C.CUSTOMER_ID;
Execution Plan
----------------------------------------------------------
Plan hash value: 3042513348
----------------------------------------------------------------------------------------
| Id  | Operation          | Name      | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |           |  1352K|    45M|       |  7296   (1)| 00:00:01 |
|*  1 |  HASH JOIN         |           |  1352K|    45M|  1120K|  7296   (1)| 00:00:01 |
|   2 |   TABLE ACCESS FULL| CUSTOMERS | 45703 |   580K|       |   240   (0)| 00:00:01 |
|   3 |   TABLE ACCESS FULL| ORDERS    |  1352K|    28M|       |  4821   (1)| 00:00:01 |
----------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - access("O"."CUSTOMER_ID"="C"."CUSTOMER_ID")

Note
-----
   - this is an adaptive plan
Note - Hash tablle is customers and probe table is orders


--Run the following query and observe the used join in the execution plan.
--Sort-merge is used because the row sources are quite large.
--Note: Sort-merge join usually involves full table scan (scattered read), therefore it is affected by the value of DB_FILE_MULTIBLOCK_READ_COUNT.

SELECT ENAME , DNAME FROM DEPT, EMP WHERE DEPT.DEPT_NO = EMP.DEPT_NO;
Execution Plan
----------------------------------------------------------
Plan hash value: 2125045483
----------------------------------------------------------------------------------------
| Id  | Operation                    | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |         |   879 | 28128 |    38   (3)| 00:00:01 |
|   1 |  MERGE JOIN                  |         |   879 | 28128 |    38   (3)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT    |     7 |    91 |     2   (0)| 00:00:01 |
|   3 |    INDEX FULL SCAN           | DEPT_PK |     7 |       |     1   (0)| 00:00:01 |
|*  4 |   SORT JOIN                  |         |   879 | 16701 |    36   (3)| 00:00:01 |
|   5 |    TABLE ACCESS FULL         | EMP     |   879 | 16701 |    35   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("DEPT"."DEPT_NO"="EMP"."DEPT_NO")
       filter("DEPT"."DEPT_NO"="EMP"."DEPT_NO")
Note - DEPT is hash table and stored in PGA as it is pre-sorted by primary key
       EMP is probe table and stored in SGA and sorted as it is not pre-sorted by
	   dept_no which is not its primary key.
	   
	   
--Run the following query
--Cartisian join is used as join condition is mission and this is very expensive

select ename,dname from dept, emp;
Execution Plan
----------------------------------------------------------
Plan hash value: 2034389985
-----------------------------------------------------------------------------
| Id  | Operation            | Name | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------
|   0 | SELECT STATEMENT     |      |  6153 |   156K|   272   (0)| 00:00:01 |
|   1 |  MERGE JOIN CARTESIAN|      |  6153 |   156K|   272   (0)| 00:00:01 |
|   2 |   TABLE ACCESS FULL  | DEPT |     7 |    70 |    35   (0)| 00:00:01 |
|   3 |   BUFFER SORT        |      |   879 | 14064 |   237   (0)| 00:00:01 |
|   4 |    TABLE ACCESS FULL | EMP  |   879 | 14064 |    34   (0)| 00:00:01 |
-----------------------------------------------------------------------------
