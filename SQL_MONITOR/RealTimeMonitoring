 V$SQL_MONITOR and V$SQL_PLAN_MONITOR 
Mornitoring the session activity realtime
show parameter statistics_level;     --it should be set to typical
show parameter control_managment_pack_access      --the value should be DIAGNOCTIC+TUNING

VARIABLE OP_ID NUMBER;
BEGIN
:OP_ID := DBMS_SQL_MONITOR.BEGIN_OPERATION (
DBOP_NAME => 'ORA.HR.TOPEMPLOYEES', -- name of the operation
SESSION_ID=> &SID,
SESSION_SERIAL=> &SERIAL#,
FORCED_TRACKING => 'Y' -- or DBMS_SQL_MONITOR.FORCE_TRACKING );
END;
/
print :OP_ID

--Monitor the operation
set linesize 180
col STATUS format a20
col USERNAME format a20
col MODULE format a20
col ACTION format a20
SELECT DBOP_EXEC_ID, STATUS, USERNAME, MODULE, ACTION
FROM V$SQL_MONITOR
WHERE (DBOP_NAME='ORA.SOE.TOPCUSTOMERS' OR IN_DBOP_NAME='ORA.SOE.TOPCUSTOMERS')
AND DBOP_EXEC_ID= :OP_ID;

SELECT 'DBOP_NAME: ' || DBOP_NAME ||CHR(10) || 'IN_DBOP_NAME: ' || IN_DBOP_NAME
|| CHR(10) || 'SQL_ID: ' || SQL_ID || CHR(10) || 'SQL_TEXT: ' || SQL_TEXT AS
"Operation Tasks"
FROM V$SQL_MONITOR
WHERE (DBOP_NAME='ORA.SOE.TOPCUSTOMERS' OR IN_DBOP_NAME='ORA.SOE.TOPCUSTOMERS')
ORDER BY DBOP_NAME;

--Check progress of perticular SQL
DEFINE v_sql_id = '<sql_id>'
COL ID FORMAT 999
COL OPERATION FORMAT A20
COL OBJECT FORMAT A18
COL STATUS FORMAT A8
SET COLSEP '|'
SET LINES 100
SELECT P.ID,
 RPAD(' ',P.DEPTH*2, ' ')||P.OPERATION OPERATION,
 P.OBJECT_NAME OBJECT,
 P.CARDINALITY CARD,
 P.COST COST,
 SUBSTR(M.STATUS,1,4) STATUS,
 M.OUTPUT_ROWS
FROM V$SQL_PLAN P, V$SQL_PLAN_MONITOR M
WHERE P.SQL_ID=M.SQL_ID
AND P.CHILD_ADDRESS=M.SQL_CHILD_ADDRESS
AND P.PLAN_HASH_VALUE=M.SQL_PLAN_HASH_VALUE
AND P.ID=M.PLAN_LINE_ID
AND M.SQL_ID='&V_SQL_ID'
ORDER BY P.ID;

col STATUS format a20
SELECT STATUS FROM V$SQL_MONITOR WHERE DBOP_NAME='ORA.SOE.TOPCUSTOMERS';

--End of monitoring - 
exec DBMS_SQL_MONITOR.END_OPERATION ( DBOP_NAME =>'ORA.SOE.TOPCUSTOMERS', DBOP_EID=> :OP_ID )

--Monitor disk reads and CPU in real time of a query
SELECT 'REPORT_ID: ' || REPORT_ID ||CHR(10) || 'STATUS: ' || STATUS ||CHR(10) ||
'USERNAME: ' || USERNAME || CHR(10) || 'SQL_TEXT: ' || SQL_TEXT || CHR(10) ||
'CPU_TIME: ' || CPU_TIME || CHR(10) ||'DISK_READS: '|| DISK_READS AS
"Monitoring Tasks"
FROM V$SQL_MONITOR
WHERE USERNAME='&username' AND sql_id='&sql_id'


--Generate report on executed operation
set long 1000000
set longchunksize 1000000
set linesize 1000
set pagesize 0
set trim on
set trimspool on
set echo off
set feedback off
SPOOL /media/sf_extdisk/myreport.html
SELECT DBMS_SQL_MONITOR.REPORT_SQL_MONITOR(
 DBOP_NAME => 'ORA.SOE.TOPCUSTOMERS',
 TYPE => 'HTML',
 REPORT_LEVEL => 'ALL') AS REPORT
FROM DUAL;
SPOOL OFF

--Generate more detailed report on monitored query
SPOOL /media/sf_extdisk/myreport2.html
SELECT DBMS_SQLTUNE.report_sql_monitor_list(
 sql_id => '&V_SQL_ID',
 type => 'HTML',
 report_level => 'ALL') AS report
FROM dual;
SPOOL OFF

--The report displays basic performance statistics on the monitored query.
Note: The views V$SQL_MONITOR and V$SQL_PLAN_MONITOR provide more performance statistics
details than what the generated reports do.

Queries that consume more than 5 seconds from the CPU or I/O time can be monitored via v$sql_monitor or it executes in parallel.
And when hint /*+ monitor */ is used in the statement.

Use DBMS_MONITOR to monitor in real time a simple database operation or a composite database operation.
--We can monitor the operations of a sessions (except the queries that spend <5 seconds on CPU or I/O are not monitored).

About Database Real Time Monitoring using
DBMS_MONITOR

---Purpose: identifying expensive (high response time) SQL statements and PL/SQL program units and producing a report about its execution
---Database real time monitoring works with:
   - Simple database operation: single SQL statement or PL/SQL subprogram
   - Composite database operation: monitors activities in one or more
---sessions between two points in time
---Requirements:
    --STATISTICS_LEVEL is TYPICAL (default) or ALL
    --CONTROL_MANAGEMENT_PACK_ACCESS initialization parameter is set to
    --DIAGNOSTIC+TUNING (default) (separate licenses)
    --Best for viewing an execution plan step statistics in real-time
    
---Monitoring Composite Database Operation
 - Composite database operations are monitored when you started an operation with DBMS_SQL_MONITOR.BEGIN_OPERATION, and:
 - The operation has consumed at least 5 seconds of CPU or I/O time
     or
 - Tracking for the operations is forced by setting FORCE_TRACKING to Y in BEGIN_OPERATION
 
 
 ---Obtain Information About Monitored Operations
 Performance statistics can be obtained about monitored operations:
 V$SQL_MONITOR - Displays SQL statements, whose execution have been (or are being) monitored by database, and their performance statistics.
• In simple operations: one entry per simple operation
• In composite operation: statistics are accumulated for the statements that run more than one during the operation sessions
V$SQL_PLAN_MONITOR
Contains monitoring statistics for each step in the execution plan of the monitored SQL statement


